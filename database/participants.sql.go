// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: participants.sql

package database

import (
	"context"
)

const addParticipantToBill = `-- name: AddParticipantToBill :one
INSERT INTO participants (bill_id, user_id, joined_at)
VALUES (?1, ?2, ?3)
RETURNING id, bill_id, user_id, joined_at, payment_status
`

type AddParticipantToBillParams struct {
	BillID   int64
	UserID   int64
	JoinedAt int64
}

func (q *Queries) AddParticipantToBill(ctx context.Context, arg AddParticipantToBillParams) (Participant, error) {
	row := q.db.QueryRowContext(ctx, addParticipantToBill, arg.BillID, arg.UserID, arg.JoinedAt)
	var i Participant
	err := row.Scan(
		&i.ID,
		&i.BillID,
		&i.UserID,
		&i.JoinedAt,
		&i.PaymentStatus,
	)
	return i, err
}

const getBillParticipants = `-- name: GetBillParticipants :many
SELECT
    id,
    full_name,
    email,
    password
FROM users
WHERE id IN (
    SELECT user_id FROM participants
    WHERE bill_id = ?1
)
`

func (q *Queries) GetBillParticipants(ctx context.Context, billID int64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getBillParticipants, billID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
