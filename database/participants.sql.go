// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: participants.sql

package database

import (
	"context"
	"database/sql"
)

const addParticipantToBill = `-- name: AddParticipantToBill :one
INSERT INTO participants (bill_id, nickname, user_id, joined_at)
VALUES (?1, ?2, ?3, ?4)
RETURNING id, bill_id, user_id, nickname, joined_at, payment_status
`

type AddParticipantToBillParams struct {
	BillID   int64  `json:"bill_id"`
	Nickname string `json:"nickname"`
	UserID   int64  `json:"user_id"`
	JoinedAt int64  `json:"joined_at"`
}

func (q *Queries) AddParticipantToBill(ctx context.Context, arg AddParticipantToBillParams) (Participant, error) {
	row := q.db.QueryRowContext(ctx, addParticipantToBill,
		arg.BillID,
		arg.Nickname,
		arg.UserID,
		arg.JoinedAt,
	)
	var i Participant
	err := row.Scan(
		&i.ID,
		&i.BillID,
		&i.UserID,
		&i.Nickname,
		&i.JoinedAt,
		&i.PaymentStatus,
	)
	return i, err
}

const getBillParticipants = `-- name: GetBillParticipants :many
SELECT p.id as id, u.id AS user_id, full_name, nickname
FROM participants p
LEFT JOIN users u ON p.user_id = u.id
WHERE p.bill_id = ?1
`

type GetBillParticipantsRow struct {
	ID       int64         `json:"id"`
	UserID   sql.NullInt64 `json:"user_id"`
	FullName string        `json:"full_name"`
	Nickname string        `json:"nickname"`
}

func (q *Queries) GetBillParticipants(ctx context.Context, billID int64) ([]GetBillParticipantsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBillParticipants, billID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBillParticipantsRow{}
	for rows.Next() {
		var i GetBillParticipantsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FullName,
			&i.Nickname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
