// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: orders.sql

package database

import (
	"context"
	"database/sql"
	"strings"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (participant_id, item_id, qty, note)
VALUES (?1, ?2, ?3, ?4)
RETURNING id, participant_id, item_id, qty, note
`

type CreateOrderParams struct {
	ParticipantID int64          `json:"participant_id"`
	ItemID        int64          `json:"item_id"`
	Qty           int64          `json:"qty"`
	Note          sql.NullString `json:"note"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ParticipantID,
		arg.ItemID,
		arg.Qty,
		arg.Note,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ParticipantID,
		&i.ItemID,
		&i.Qty,
		&i.Note,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = ?1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getAllOrders = `-- name: GetAllOrders :many
SELECT
    o.id,
    o.participant_id,
    o.item_id,
    i.name AS item_name,
    i.price,
    o.qty,
    (o.qty * i.price) AS subtotal
FROM orders o
JOIN items i ON i.id = o.item_id
JOIN participants p ON p.id = o.participant_id
WHERE p.bill_id = ?1
ORDER BY participant_id, item_id
`

type GetAllOrdersRow struct {
	ID            int64       `json:"id"`
	ParticipantID int64       `json:"participant_id"`
	ItemID        int64       `json:"item_id"`
	ItemName      string      `json:"item_name"`
	Price         float64     `json:"price"`
	Qty           int64       `json:"qty"`
	Subtotal      interface{} `json:"subtotal"`
}

func (q *Queries) GetAllOrders(ctx context.Context, billID int64) ([]GetAllOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrders, billID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllOrdersRow{}
	for rows.Next() {
		var i GetAllOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.ParticipantID,
			&i.ItemID,
			&i.ItemName,
			&i.Price,
			&i.Qty,
			&i.Subtotal,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParticipantOrders = `-- name: GetParticipantOrders :many
SELECT
    o.id,
    o.participant_id,
    o.item_id,
    i.name AS item_name,
    i.price,
    o.qty,
    (o.qty * i.price) AS subtotal
FROM orders o
JOIN items i ON i.id = o.item_id
WHERE participant_id IN (/*SLICE:participant_ids*/?)
`

type GetParticipantOrdersRow struct {
	ID            int64       `json:"id"`
	ParticipantID int64       `json:"participant_id"`
	ItemID        int64       `json:"item_id"`
	ItemName      string      `json:"item_name"`
	Price         float64     `json:"price"`
	Qty           int64       `json:"qty"`
	Subtotal      interface{} `json:"subtotal"`
}

func (q *Queries) GetParticipantOrders(ctx context.Context, participantIds []int64) ([]GetParticipantOrdersRow, error) {
	query := getParticipantOrders
	var queryParams []interface{}
	if len(participantIds) > 0 {
		for _, v := range participantIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:participant_ids*/?", strings.Repeat(",?", len(participantIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:participant_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetParticipantOrdersRow{}
	for rows.Next() {
		var i GetParticipantOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.ParticipantID,
			&i.ItemID,
			&i.ItemName,
			&i.Price,
			&i.Qty,
			&i.Subtotal,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
SET
    participant_id = ?1,
    item_id = ?2,
    qty = ?3,
    note = ?4
WHERE id = ?5
`

type UpdateOrderParams struct {
	ParticipantID int64          `json:"participant_id"`
	ItemID        int64          `json:"item_id"`
	Qty           int64          `json:"qty"`
	Note          sql.NullString `json:"note"`
	ID            int64          `json:"id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateOrder,
		arg.ParticipantID,
		arg.ItemID,
		arg.Qty,
		arg.Note,
		arg.ID,
	)
	return err
}
