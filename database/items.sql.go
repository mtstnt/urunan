// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: items.sql

package database

import (
	"context"
)

const addItemToBill = `-- name: AddItemToBill :one
INSERT INTO items (name, price, initial_qty, bill_id)
VALUES (?1, ?2, ?3, ?4)
RETURNING id, bill_id, name, price, initial_qty
`

type AddItemToBillParams struct {
	Name       string  `json:"name"`
	Price      float64 `json:"price"`
	InitialQty int64   `json:"initial_qty"`
	BillID     int64   `json:"bill_id"`
}

func (q *Queries) AddItemToBill(ctx context.Context, arg AddItemToBillParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, addItemToBill,
		arg.Name,
		arg.Price,
		arg.InitialQty,
		arg.BillID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.BillID,
		&i.Name,
		&i.Price,
		&i.InitialQty,
	)
	return i, err
}

const getBillItems = `-- name: GetBillItems :many
SELECT id, bill_id, name, price, initial_qty
FROM items
WHERE bill_id = ?
`

func (q *Queries) GetBillItems(ctx context.Context, billID int64) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getBillItems, billID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.BillID,
			&i.Name,
			&i.Price,
			&i.InitialQty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsRemainingQtyByBill = `-- name: GetItemsRemainingQtyByBill :many
SELECT
    id,
    name,
    price,
    initial_qty,
    (initial_qty - purchased_qty) AS remaining_qty
FROM items
LEFT JOIN (
    SELECT o.item_id, SUM(qty) AS purchased_qty FROM orders o
    LEFT JOIN participants p ON p.id = o.participant_id
    WHERE p.bill_id = ?1
    GROUP BY o.item_id
) a ON a.item_id = id
WHERE bill_id = ?1
`

type GetItemsRemainingQtyByBillRow struct {
	ID           int64       `json:"id"`
	Name         string      `json:"name"`
	Price        float64     `json:"price"`
	InitialQty   int64       `json:"initial_qty"`
	RemainingQty interface{} `json:"remaining_qty"`
}

func (q *Queries) GetItemsRemainingQtyByBill(ctx context.Context, billID int64) ([]GetItemsRemainingQtyByBillRow, error) {
	rows, err := q.db.QueryContext(ctx, getItemsRemainingQtyByBill, billID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetItemsRemainingQtyByBillRow{}
	for rows.Next() {
		var i GetItemsRemainingQtyByBillRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.InitialQty,
			&i.RemainingQty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItemAtBill = `-- name: UpdateItemAtBill :one
UPDATE items
    SET
        name = ?1,
        price = ?2,
        initial_qty = ?3
    WHERE id = ?4
RETURNING id, bill_id, name, price, initial_qty
`

type UpdateItemAtBillParams struct {
	Name       string  `json:"name"`
	Price      float64 `json:"price"`
	InitialQty int64   `json:"initial_qty"`
	ItemID     int64   `json:"item_id"`
}

func (q *Queries) UpdateItemAtBill(ctx context.Context, arg UpdateItemAtBillParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItemAtBill,
		arg.Name,
		arg.Price,
		arg.InitialQty,
		arg.ItemID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.BillID,
		&i.Name,
		&i.Price,
		&i.InitialQty,
	)
	return i, err
}
