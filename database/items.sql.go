// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: items.sql

package database

import (
	"context"
)

const addItemToBill = `-- name: AddItemToBill :one
INSERT INTO items (name, price, initial_qty)
VALUES (?1, ?2, ?3)
RETURNING id, bill_id, name, price, initial_qty
`

type AddItemToBillParams struct {
	Name       string
	Price      float64
	InitialQty int64
}

func (q *Queries) AddItemToBill(ctx context.Context, arg AddItemToBillParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, addItemToBill, arg.Name, arg.Price, arg.InitialQty)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.BillID,
		&i.Name,
		&i.Price,
		&i.InitialQty,
	)
	return i, err
}

const getBillItems = `-- name: GetBillItems :many
SELECT
    id,
    name,
    price,
    initial_qty
FROM items
WHERE bill_id = ?
`

type GetBillItemsRow struct {
	ID         int64
	Name       string
	Price      float64
	InitialQty int64
}

func (q *Queries) GetBillItems(ctx context.Context, billID int64) ([]GetBillItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBillItems, billID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBillItemsRow
	for rows.Next() {
		var i GetBillItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.InitialQty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItemAtBill = `-- name: UpdateItemAtBill :one
UPDATE items
    SET
        name = ?1,
        price = ?2,
        initial_qty = ?3
    WHERE id = ?4
RETURNING id, bill_id, name, price, initial_qty
`

type UpdateItemAtBillParams struct {
	Name       string
	Price      float64
	InitialQty int64
	ItemID     int64
}

func (q *Queries) UpdateItemAtBill(ctx context.Context, arg UpdateItemAtBillParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItemAtBill,
		arg.Name,
		arg.Price,
		arg.InitialQty,
		arg.ItemID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.BillID,
		&i.Name,
		&i.Price,
		&i.InitialQty,
	)
	return i, err
}
